<?php

namespace ContainerJD5ucGT;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class get_ServiceLocator_LxbQ9rlService extends App_KernelDevDebugContainer
{
    /**
     * Gets the private '.service_locator.LxbQ9rl' shared service.
     *
     * @return \Symfony\Component\DependencyInjection\ServiceLocator
     */
    public static function do($container, $lazyLoad = true)
    {
        return $container->privates['.service_locator.LxbQ9rl'] = new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService, [
            'App\\Controller\\BetsController::createBet' => ['privates', '.service_locator.EF10B68', 'get_ServiceLocator_EF10B68Service', true],
            'App\\Controller\\BetsController::getAllBets' => ['privates', '.service_locator.Cdl7IKX', 'get_ServiceLocator_Cdl7IKXService', true],
            'App\\Controller\\BetsController::getBet' => ['privates', '.service_locator.IVkeohW', 'get_ServiceLocator_IVkeohWService', true],
            'App\\Controller\\BetsController::softDeleteBets' => ['privates', '.service_locator.8WEWLxf', 'get_ServiceLocator_8WEWLxfService', true],
            'App\\Controller\\BetsController::updateBet' => ['privates', '.service_locator.ZfQts79', 'get_ServiceLocator_ZfQts79Service', true],
            'App\\Controller\\MatchsController::excludePlayedMatchs' => ['privates', '.service_locator.iSNF9R5', 'get_ServiceLocator_ISNF9R5Service', true],
            'App\\Controller\\MatchsController::getAllMatchs' => ['privates', '.service_locator.1YdIaCj', 'get_ServiceLocator_1YdIaCjService', true],
            'App\\Controller\\MatchsController::getMatch' => ['privates', '.service_locator.e0O5x1D', 'get_ServiceLocator_E0O5x1DService', true],
            'App\\Controller\\MatchsController::getRandomMatchsID' => ['privates', '.service_locator.iSNF9R5', 'get_ServiceLocator_ISNF9R5Service', true],
            'App\\Controller\\MatchsController::simulateMatchs' => ['privates', '.service_locator.s0luopm', 'get_ServiceLocator_S0luopmService', true],
            'App\\Controller\\MatchsController::simulateSingleMatch' => ['privates', '.service_locator.ifSrOeS', 'get_ServiceLocator_IfSrOeSService', true],
            'App\\Kernel::loadRoutes' => ['privates', '.service_locator.xUrKPVU', 'get_ServiceLocator_XUrKPVUService', true],
            'App\\Kernel::registerContainerConfiguration' => ['privates', '.service_locator.xUrKPVU', 'get_ServiceLocator_XUrKPVUService', true],
            'kernel::loadRoutes' => ['privates', '.service_locator.xUrKPVU', 'get_ServiceLocator_XUrKPVUService', true],
            'kernel::registerContainerConfiguration' => ['privates', '.service_locator.xUrKPVU', 'get_ServiceLocator_XUrKPVUService', true],
            'App\\Controller\\BetsController:createBet' => ['privates', '.service_locator.EF10B68', 'get_ServiceLocator_EF10B68Service', true],
            'App\\Controller\\BetsController:getAllBets' => ['privates', '.service_locator.Cdl7IKX', 'get_ServiceLocator_Cdl7IKXService', true],
            'App\\Controller\\BetsController:getBet' => ['privates', '.service_locator.IVkeohW', 'get_ServiceLocator_IVkeohWService', true],
            'App\\Controller\\BetsController:softDeleteBets' => ['privates', '.service_locator.8WEWLxf', 'get_ServiceLocator_8WEWLxfService', true],
            'App\\Controller\\BetsController:updateBet' => ['privates', '.service_locator.ZfQts79', 'get_ServiceLocator_ZfQts79Service', true],
            'App\\Controller\\MatchsController:excludePlayedMatchs' => ['privates', '.service_locator.iSNF9R5', 'get_ServiceLocator_ISNF9R5Service', true],
            'App\\Controller\\MatchsController:getAllMatchs' => ['privates', '.service_locator.1YdIaCj', 'get_ServiceLocator_1YdIaCjService', true],
            'App\\Controller\\MatchsController:getMatch' => ['privates', '.service_locator.e0O5x1D', 'get_ServiceLocator_E0O5x1DService', true],
            'App\\Controller\\MatchsController:getRandomMatchsID' => ['privates', '.service_locator.iSNF9R5', 'get_ServiceLocator_ISNF9R5Service', true],
            'App\\Controller\\MatchsController:simulateMatchs' => ['privates', '.service_locator.s0luopm', 'get_ServiceLocator_S0luopmService', true],
            'App\\Controller\\MatchsController:simulateSingleMatch' => ['privates', '.service_locator.ifSrOeS', 'get_ServiceLocator_IfSrOeSService', true],
            'kernel:loadRoutes' => ['privates', '.service_locator.xUrKPVU', 'get_ServiceLocator_XUrKPVUService', true],
            'kernel:registerContainerConfiguration' => ['privates', '.service_locator.xUrKPVU', 'get_ServiceLocator_XUrKPVUService', true],
        ], [
            'App\\Controller\\BetsController::createBet' => '?',
            'App\\Controller\\BetsController::getAllBets' => '?',
            'App\\Controller\\BetsController::getBet' => '?',
            'App\\Controller\\BetsController::softDeleteBets' => '?',
            'App\\Controller\\BetsController::updateBet' => '?',
            'App\\Controller\\MatchsController::excludePlayedMatchs' => '?',
            'App\\Controller\\MatchsController::getAllMatchs' => '?',
            'App\\Controller\\MatchsController::getMatch' => '?',
            'App\\Controller\\MatchsController::getRandomMatchsID' => '?',
            'App\\Controller\\MatchsController::simulateMatchs' => '?',
            'App\\Controller\\MatchsController::simulateSingleMatch' => '?',
            'App\\Kernel::loadRoutes' => '?',
            'App\\Kernel::registerContainerConfiguration' => '?',
            'kernel::loadRoutes' => '?',
            'kernel::registerContainerConfiguration' => '?',
            'App\\Controller\\BetsController:createBet' => '?',
            'App\\Controller\\BetsController:getAllBets' => '?',
            'App\\Controller\\BetsController:getBet' => '?',
            'App\\Controller\\BetsController:softDeleteBets' => '?',
            'App\\Controller\\BetsController:updateBet' => '?',
            'App\\Controller\\MatchsController:excludePlayedMatchs' => '?',
            'App\\Controller\\MatchsController:getAllMatchs' => '?',
            'App\\Controller\\MatchsController:getMatch' => '?',
            'App\\Controller\\MatchsController:getRandomMatchsID' => '?',
            'App\\Controller\\MatchsController:simulateMatchs' => '?',
            'App\\Controller\\MatchsController:simulateSingleMatch' => '?',
            'kernel:loadRoutes' => '?',
            'kernel:registerContainerConfiguration' => '?',
        ]);
    }
}
